Introduction to Golang
Fri 6 Sep 2019

Sonia Hamilton

* Overview

- Why Use Go?
- Hello World
- if/then, slices, maps
- functions, structs, interfaces
- concurrency

.link https://talks.godoc.org/github.com/soniah/go-hello-world/intro.slide
.link https://tinyurl.com/y2exdknt

* Why Go?

*TL;DR* concurrency - based on *goroutines* and *channels*.

- goroutines and channels

.image  concurrency.png _ 400

- cores
- can't you just use C/C++/Java/Scala/Haskell?  Yes but...
- are you using it? Versus *go*func()*
- C/C++/Java threads are still heavy, 1-10K vs _millions_ goroutines in Go

* Why Go?

- announced 2009
- creators: Ken Thompson (Plan 9 Bell Labs), Rob Pike (Plan 9), Robert Griesemer (V8 Engine) _we_started_off_with_the_idea_that_all_three_of_us_had_to_be_talked_into_every_feature_in_the_language,_so_there_was_no_extraneous_garbage_put_into_the_language_for_any_reason_

- statically typed + type inference, garbage collected
- fast compilation, statically linked, "scp deploy"
- no inheritance - interfaces "duck typing"
- can link in C libraries
- tool chain *go*fmt*

* Hello World

- Go installed
- standard folder structure
- Goland installed
- print "Hello World!"

* Is Go Installed?

  go version

- Mac: start the terminal by typing 'âŒ˜ SPACE terminal'

.image version-osx.png _ 200

- Windows: start the terminal by typing 'Start, Run, Cmd'

.image version-windows.png _ 200

- Linux: start a terminal

* Standard Folder Structure

We want the following:

  ~/
    go/
      bin/
      pkg/
      src/
        helloworld/

On Linux/OSX:

  mkdir -p ~/go/{bin,pkg,src/helloworld}

On Windows:

  Use Windows Explorer

_More_Advanced_: $GOPATH, dep and vendor, modules

* Editors

- editors: Atom, Brackets, Visual Studio Code, BBEdit, Emacs, Notepad++, Sublime Text, TextMate, Vim,...
- best editor?

.image arya_fighting.jpg _ 500

- I use *Goland* and *Vim*
- _what_are_your_colleagues_using_?

* Goland - HelloWorld

- new project in *~/go/src/helloworld*

.play hello_world.go

- run from Goland
- run from shell:

  cd ~/go/src/helloworld
  go run main.go
  go build main.go
  ./main
  go build -o hello main.go
  ./hello

* Comments, Variables, If Else

.play comments.go /comment/,/FIN/

* Exercises

.link https://gobyexample.com

- variable/const with your name, print "Hello xxx"
- only print out if name is "Arya" or "Samwell"
- only print out if name starts with A or S (strings.HasPrefix)

.image samwell.png _ 400

* Arrays and Slices

.image slice.png _ 400

.play slice.go /Array_ori/,/^}/

* Exercises

- create a slice of numbers; use a *for* loop to calculate sum
- create a slice of Australian cities; print them out as one long string. For example:

  ["Sydney", "Melbourne", "Lismore"] would be "SydneyMelbourneLismore"

  result := "apple"
  result += "banana"

- print out the cities separated by commas eg "Sydney, Melbourne, Lismore"

* Debugger

.image debugger.png

* Maps

.image map.png _ 400

.play maps.go /^func main/,/^}/

Order is *random* ("indeterminate")

* Exercises

- create of map of students, "name" to "score out of 100". Print out students whose score is between 60 and 80

.image study.png _ 200

- create of map of Australian cities (eg Mullum) to states (eg NSW). Print out the number of cities per state

.image lismore.png _ 200

* Functions

.play functions.go

* Functions Exercises

- write a function that squares a number; print out the squares between 5 and 10 (hint: use a different form of the 'for' loop)
- write a second squares function that returns an error if the number 42 is provided. Loop for numbers between 40 and 50 and print "don't ask" when an error occurs

* Structs

.play structs.go /struct/,/mark1/

* Interfaces

- define and implement

.play interfaces.go /mark2/,/mark3/

- use

.play interfaces.go /mark4/,/mark5/

* Exercise

- implement the TwoDSpacer interface

.play ex_interfaces.go /interface/,/FIN/

* Concurrency

- shared memory + primitives eg mutexes, semaphores, etc

.image shared_memory.png _ 200

- channels

.image channels.jpg _ 350

* Synchronization Primitives

- for example a waitgroup - "waits for a collection of goroutines to finish"

.play goroutines.go /^func main/,/FIN/

* Channels

.play concurrency.go /^func prod/,/FIN/

* Channels

.play timers.go /^func main/,/FIN/

* Wrap up

- Useful websites

.link https://gobyexample.com

.link https://tour.golang.org

.link https://play.golang.org

.link https://goplay.space

- questions?

- Sonia Hamilton, https://github.com/soniah/go-hello-world
